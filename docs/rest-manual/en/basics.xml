<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2009 Red Hat, Inc.
  ~  Red Hat licenses this file to you under the Apache License, version
  ~  2.0 (the "License"); you may not use this file except in compliance
  ~  with the License.  You may obtain a copy of the License at
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~  Unless required by applicable law or agreed to in writing, software
  ~  distributed under the License is distributed on an "AS IS" BASIS,
  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
  ~  implied.  See the License for the specific language governing
  ~  permissions and limitations under the License.
  -->

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "HornetQ_Rest_Manual.ent">
%BOOK_ENTITIES;
]>
  <chapter>
    <title>HornetQ REST Interface Basics</title>

    <para>The HornetQ REST interface publishes a variety of REST resources to
    perform various tasks on a queue or topic. Only the top-level queue and
    topic URI schemes are published to the outside world. You must discover
    all over resources to interact with by looking for and traversing links.
    You'll find published links within custom response headers and embedded in
    published XML representations. Let's look at how this works.</para>

    <sect1>
      <title>Queue and Topic Resources</title>

      <para>To interact with a queue or topic you do a HEAD or GET request on
      the following relative URI pattern:</para>

      <programlisting>/queues/{name}
/topics/{name}
</programlisting>

      <para>The base of the URI is the base URL of the WAR you deployed the
      HornetQ REST server within as defined in the Installation and
      Configuration section of this document. Replace the
      <literal>{name}</literal> string within the above URI pattern with the
      name of the queue or topic you are interested in interacting with. For
      example if you have configured a JMS topic named "foo" within your
      <literal>hornetq-jms.xml</literal> file, the URI name should be
      "jms.topic.foo". If you have configured a JMS queue name "bar" within
      your <literal>hornetq-jms.xml</literal> file, the URI name should be
      "jms.queue.bar". Internally, HornetQ prepends the "jms.topic" or
      "jms.queue" strings to the name of the deployed destination. Next,
      perform your HEAD or GET request on this URI. Here's what a
      request/response would look like.</para>

      <programlisting>HEAD /queues/jms.queue.bar HTTP/1.1
Host: example.com

--- Response ---
HTTP/1.1 200 Ok
msg-create: http://example.com/queues/jms.queue.bar/create
msg-pull-consumers: http://example.com/queues/jms.queue.bar/pull-consumers
msg-push-consumers: http://example.com/queues/jms.queue.bar/push-consumers
</programlisting>

      <para>The HEAD or GET response contains a number of custom response
      headers that are URLs to additional REST resources that allow you to
      interact with the queue or topic in different ways. It is important not
      to rely on the scheme of the URLs returned within these headers as they
      are an implementation detail. Treat them as opaque and query for them
      each and every time you initially interact (at boot time) with the
      server. If you treat all URLs as opaque then you will be isolated from
      implementation changes as the HornetQ REST interface evolves over
      time.</para>

      <para></para>
    </sect1>

    <sect1>
      <title>Queue Resource Response Headers</title>

      <para>Below is a list of response headers you should expect when
      interacting with a Queue resource.</para>

      <variablelist>
        <varlistentry>
          <term>msg-create</term>

          <listitem>
            <para>This is a URL you POST messages to. The semantics of this
            link are described in Chapter 4.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>msg-create-with-id</term>

          <listitem>
            <para>This is a URL template you POST message to. The semantics of
            this link are described in Chapter 4.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>msg-pull-consumers</term>

          <listitem>
            <para>This is a URL for creating consumers that will pull from a
            queue. The semantics of this link are described in Chapter
            5.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>msg-push-consumers</term>

          <listitem>
            <para>This is a URL for registering other URLs you want the
            HornetQ REST server to push messages to. The semantics of this
            link are described in Chapter 6</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect1>

    <sect1>
      <title>Topic Resource Respones Headers</title>

      <para>Below is a list of response headers you should expect when
      interacting with a Topic resource.</para>

      <variablelist>
        <varlistentry>
          <term>msg-create</term>

          <listitem>
            <para>This is a URL you POST messages to. The semantics of this
            link are described in Chapter 4.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>msg-create-with-id</term>

          <listitem>
            <para>This is a URL template you POST messages to. The semantics
            of this link are described in Chapter 4.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>msg-pull-subscriptions</term>

          <listitem>
            <para>This is a URL for creating subscribers that will pull from a
            topic. The semantics of this link are described in Chapter
            5.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>msg-push-subscriptions</term>

          <listitem>
            <para>This is a URL for registering other URLs you want the
            HornetQ REST server to push messages to. The semantics of this
            link are described in Chapter 6.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para></para>
    </sect1>
  </chapter>