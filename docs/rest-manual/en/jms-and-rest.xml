<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2009 Red Hat, Inc.
  ~  Red Hat licenses this file to you under the Apache License, version
  ~  2.0 (the "License"); you may not use this file except in compliance
  ~  with the License.  You may obtain a copy of the License at
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~  Unless required by applicable law or agreed to in writing, software
  ~  distributed under the License is distributed on an "AS IS" BASIS,
  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
  ~  implied.  See the License for the specific language governing
  ~  permissions and limitations under the License.
  -->

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "HornetQ_Rest_Manual.ent">
%BOOK_ENTITIES;
]>
<chapter>
    <title>Mixing JMS and REST</title>

    <para>The HornetQ REST interface supports mixing JMS and REST producres
    and consumers. You can send an ObjectMessage through a JMS Producer, and
    have a REST client consume it. You can have a REST client POST a message
    to a topic and have a JMS Consumer receive it. Some simple transformations
    are supported if you have the correct RESTEasy providers installed.</para>

    <sect1>
      <title>JMS Producers - REST Consumers</title>

      <para>If you have a JMS producer, the HornetQ REST interface only
      supports ObjectMessage type. If the JMS producer is aware that there may
      be REST consumers, it should set a JMS property to specify what
      Content-Type the Java object should be translated into by REST clients.
      The HornetQ REST server will use RESTEasy content handlers
      (MessageBodyReader/Writers) to transform the Java object to the type
      desired. Here's an example of a JMS producer setting the content type of
      the message.</para>

      <programlisting>ObjectMessage message = session.createObjectMessage();
message.setStringProperty(org.hornetq.rest.HttpHeaderProperty.CONTENT_TYPE, "application/xml");
</programlisting>

      <para>If the JMS producer does not set the content-type, then this
      information must be obtained from the REST consumer. If it is a pull
      consumer, then the REST client should send an Accept header with the
      desired media types it wants to convert the Java object into. If the
      REST client is a push registration, then the type attribute of the link
      element of the push registration should be set to the desired
      type.</para>
    </sect1>

    <sect1>
      <title>REST Producers - JMS Consumers</title>

      <para>If you have a REST client producing messages and a JMS consumer,
      HornetQ REST has a simple helper class for you to transform the HTTP
      body to a Java object. Here's some example code:</para>

      <programlisting>public void onMessage(Message message)
{
   MyType obj = org.hornetq.rest.Jms.getEntity(message, MyType.class);
}
</programlisting>

      <para>The way the <literal>getEntity()</literal> method works is that if
      the message is an ObjectMessage, it will try to extract the desired type
      from it like any other JMS message. If a REST producer sent the message,
      then the method uses RESTEasy to convert the HTTP body to the Java
      object you want. See the Javadoc of this class for more helper
      methods.</para>
    </sect1>
  </chapter>